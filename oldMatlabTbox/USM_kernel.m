function [K,K_forward,K_backward]=USM_kernel(test,train,T,N)

%USM_KERNEL calculates density for coordinates in the USMap
%
%Syntax: K=USM_kernel(test,train,T,N)
%
%Full syntax: [K,K_forward,K_backward]=USM_kernel(test,train,T,N)
%
%Description: 
%
%   test  - is the matrix of coordinates in the USMap where densities are
%           to be calculated
%
%   train - can be the filename of the fasta text file with the sequences
%         - can be the vertical matrix of USM coordinates of teh reference
%           sequences.
%         - can be the structured variable generated by the USM_main
%           function (using option "K")
%
%       T - "tau" is the ration between volumes of two levels of the
%           kernel. T~inf is equivalent to Markov transition.
%
%       N - number of levels on the kernel. Markov order= N-1;
%
%Examples:
% K=USM_kernel(rand(7,4),rand(100,4),2,5)
% K=USM_kernel(rand(7,4),'study.fas',2,5)
% K=USM_kernel(rand(7,4),USM_main('study.fas','K'))
%
%Jonas Almeida, almeidaj@musc.edu, Jan 2005

%default values
if nargin<3;T=2;end;opt.parms.T=T;
if nargin<4;N=5;end;opt.parms.N=N;
% if the training data is provided as fasta file
if ischar(train) 
    opt.case='K';
    train=USM_main(train,'K');
end
% if the training data is provided as vertical USM matrix
if isnumeric(train)
    lala=train;clear train
    train.usm.coord=lala';
    train=USM_main(train,'K');
end

%Number and dimensionality of test coordinates
[nn,mm]=size(test); %mm is the number of dimensions, nn is the number of coordinates
n=2.^N;% grid size
%index of densities in kernel vector
K_ind=ceil(test.*n);
%extract densities from kernel vector
K_density=zeros(mm,nn);
for i=1:mm
   K_density(i,:)=train.usm.K(i,K_ind(:,1)');
end
%calculate densities
K_forward=min(K_density(1:mm/2,:))';
K_backward=min(K_density(mm/2+1:end,:))';
K=sum([K_forward';K_backward'])';